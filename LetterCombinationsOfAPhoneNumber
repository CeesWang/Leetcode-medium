class Solution {
    public List<String> letterCombinations(String digits) {
        if (digits.length() == 0) {
            return new ArrayList<String>();
        }
        String [] mappedLetters = new String [] {
            "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"
        };
        char [] permutation = new char[digits.length()];
        ArrayList<String> permutations = new ArrayList<String>();
        createPermutations(permutations, permutation, 0, digits, mappedLetters);
        return permutations;
    }
    
    public void createPermutations(ArrayList<String> permutations, char [] permutation, int idx, String digits, String [] mappedLetters) {
        if (idx == digits.length()) {
            permutations.add(new String(permutation));
            return;
        }
        String phoneLetters = mappedLetters[ (int) digits.charAt(idx) - '2'];
        for (char c : phoneLetters.toCharArray()) {
            permutation[idx] = c;
            createPermutations(permutations, permutation, idx + 1, digits, mappedLetters);      
        }
    }
}
