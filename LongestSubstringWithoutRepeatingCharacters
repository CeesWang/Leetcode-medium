class Solution {
    public int lengthOfLongestSubstring(String s) {
        HashSet<Character> set = new HashSet<>();
        int longest = 0;
        for (int i = 0; i < s.length(); ++i) {
            set.add(s.charAt(i));
            for (int j = i + 1; j < s.length(); ++j) {
                char c = s.charAt(j);
                if (set.contains(c)) {
                    break;
                }
                set.add(c);
            }
            longest = Math.max(longest, set.size());
            set.clear();
        }
        return longest;
    }
}

class Solution {
    public int lengthOfLongestSubstring(String s) {
        HashSet<Character> set = new HashSet<>();
        int longest = 0, slow = 0, fast = 0;
        int len = s.length();
        while (fast < len) {
            char fastChar = s.charAt(fast);
            if (set.contains(fastChar)) {
                set.remove(s.charAt(slow));
                slow++;
            }
            else {
                set.add(fastChar);
                fast++;
            }
            
            longest = Math.max(longest, set.size());
        }
        return longest;
    }
}
