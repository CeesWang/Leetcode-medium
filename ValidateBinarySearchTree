class Solution {
    public boolean isValidBST(TreeNode root) {
        if (root == null) {
            return true;
        }
        return inOrderTraversal(root, new ArrayList<Integer>()) ? true : false;
    }
    
    public boolean inOrderTraversal(TreeNode root, ArrayList<Integer> list) {
        if (root != null) {
            boolean inOrder = true;
            inOrder = inOrder && inOrderTraversal(root.left, list);
            // check if the values are sorted in ascendinding order (BST property)
            if (list.size() > 0 && list.get(list.size() -1) >= root.val) {    
                return false;
            }
            list.add(root.val);
            inOrder = inOrder && inOrderTraversal(root.right, list);
            return inOrder;
        }
        return true;
    }
}

class Solution {
    public boolean isValidBST(TreeNode root) {
        if (root == null) {
            return true;
        }
        Stack<TreeNode> stack = new Stack<>();
        Integer prev = null;
        while (root != null || !stack.isEmpty()) {
            while (root != null) {
                stack.push(root);
                root = root.left;
            }
            root = stack.pop();
            if (prev == null) {
                prev = root.val;
            }
            else {
                if (prev >= root.val) {
                    return false;
                }
                    prev = root.val;
            }
            root = root.right;
        }
        return true;
    }
}
